const getDefault = require('./functions/getDefault.js');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class:       AggregatorMap
//
// Description: This class compiles a map for each set of results from the synchroniser.
///
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = class AggregatorMap {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    constructor
    //
    // Description: This class compiles a map for each set of results from the synchroniser.
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(joiner, options) {
        this.options = getDefault(options, {});
        this.options.commonIdsOnly = getDefault(this.options.commonIdsOnly, false);
        this.result = {}
        if (joiner.includeOuterLeft) this.result.outerLeft = {}
        if (joiner.includeInner) this.result.inner = {}
        if (joiner.includeOuterRight) this.result.outerRight = {}
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    onOuterLeft
    //
    // Description: Called if an id exists in set1 but not in set2.
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    onOuterLeft(commonId, id1, item1) {
        this.result.outerLeft[commonId] = this.options.commonIdsOnly ? true : {
            id1: id1,
            item1: item1
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    onOuterRight
    //
    // Description: Called if an id exists in set2 but not in set1.
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    onOuterRight(commonId, id2, item2) {
        this.result.outerRight[commonId] = this.options.idsOnly ? true : {
            id2: id2,
            item2: item2,
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    onInner
    //
    // Description: Called if an id exists both sets.
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    onInner(commonId, id1, item1, id2, item2) {
        this.result.inner[commonId] = this.options.idsOnly ? true : {
            id1: id1,
            item1: item1,
            id2: id2,
            item2: item2
        }
    }
}
