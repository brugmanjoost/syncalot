const { Stream } = require('stream');
const MapOriginal = require('../MapOriginal.js');
const MapRemapped = require('../MapRemapped.js');
const generateDynamicKey = require('./generateDynamicKey.js');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = (set, key) => {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Ids in streams are read on the fly
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (set instanceof Stream)
        return set;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Ids in maps and arrays are remapped if a string or function key is specified
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if ((typeof key == 'string') || (typeof key == 'function')) {

        return new MapRemapped(set, generateDynamicKey(key));

        let keyGetter = generateDynamicKey(key);
        let map = {}
        for (const idx in set)
            map[keyGetter(idx, set[idx])] = set[idx];
        return map;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Arrays without key are remapped to their contents
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (Array.isArray(set)) {
        return new MapRemapped(set, (idx, item) => item);

        let map = {}
        for (const idx in set)
            map[set[idx]] = set[idx];
        return map;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Maps without key are used as-is
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    return new MapOriginal(set);

    return set;
}